package main

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"{{ .Name }}/internal/server"
	"{{ .Name }}/internal/config"
	"{{ .Name }}/internal/db"
	"github.com/rs/zerolog/log"
)

func main() {
	cfg := config.Load()
	dbConn, cleanup, err := db.Open(cfg)
	if err != nil { log.Fatal().Err(err).Msg("db open") }
	defer cleanup()

	h := server.NewHandler(dbConn)
	srv := &http.Server{ Addr: fmt.Sprintf(":%d", cfg.Port), Handler: h }

	go func() {
		log.Info().Int("port", cfg.Port).Msg("listening")
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed { log.Fatal().Err(err).Msg("server") }
	}()

	ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt, syscall.SIGTERM); defer stop()
	<-ctx.Done()
	shutdownCtx, cancel := context.WithTimeout(context.Background(), 5*time.Second); defer cancel()
	_ = srv.Shutdown(shutdownCtx)
}
